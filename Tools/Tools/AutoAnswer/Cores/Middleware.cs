using API.Configurations;
using API.Cores;
using API.Helpers;
using log4net;
using log4net.Config;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using AutoAnswer.Services;
using System;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using System.Linq;
using AutoAnswer.Services.Interfaces;

namespace AutoAnswer
{
    public class Middleware : BackgroundService
    {
        public IOptions<AppSettings> AppSettings { get; set; }
        public ILoggerManager Logger { get; set; }
        public IUnitOfWork UnitOfWork { get; set; }
        private MiddlewareService MiddlewareService { get; set; }
        public Middleware(
            IOptions<AppSettings> options,
            IUnitOfWork unitOfWork,
            ILoggerManager logger
            )
        {
            this.AppSettings = options;
            this.UnitOfWork = unitOfWork;
            this.Logger = logger;
            this.Logger.Info($"LOGIN SERVER: ONLINE");
            Console.WriteLine(AppDomain.CurrentDomain.BaseDirectory);
            XmlDocument log4netConfig = new XmlDocument();

            using (var fs = File.OpenRead(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"))
            {
                log4netConfig.Load(fs);

                var repo = LogManager.CreateRepository(
                        Assembly.GetEntryAssembly(),
                        typeof(log4net.Repository.Hierarchy.Hierarchy));

                XmlConfigurator.Configure(repo, log4netConfig["log4net"]);
            }
            //this.Test();
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    if (this.MiddlewareService == null)
                    {
                        this.Logger.Status("Middleware started ");
                        this.MiddlewareService = new MiddlewareService(UnitOfWork);
                    }
                    else if (!this.MiddlewareService.GameServer.IsStarted && !this.MiddlewareService.LoginServer.IsStarted)
                    {
                        this.MiddlewareService = new MiddlewareService(UnitOfWork);
                    }
                    if (this.MiddlewareService.LoginServer.IsStarted)
                    {
                        this.UnitOfWork.Logger.Status($"LOGIN SERVER: ONLINE");
                    }
                    else
                    {
                        this.UnitOfWork.Logger.Status($"LOGIN SERVER: OFFLINE");
                    }
                    if (this.MiddlewareService.GameServer.IsStarted)
                    {
                        this.UnitOfWork.Logger.Status($"GAME SERVER: ONLINE");
                    }
                    else
                    {
                        this.UnitOfWork.Logger.Status($"GAME SERVER: OFFLINE");
                    }
                }
                catch (Exception ex)
                {
                    this.UnitOfWork.Logger.Error(ex.Message);
                    this.UnitOfWork.Logger.Error(ex.StackTrace);
                }
                await Task.Delay(30000, stoppingToken);
            }
            if(this.MiddlewareService != null)
            {
                this.MiddlewareService.Dispose();
            }
        }

        private void Test()
        {
            var p1 = new byte[] { 0x24, 0x00, 0xF9, 0x03, 0x85, 0xCF, 0xDC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3C, 0x8B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xF1, 0x03, 0xA2, 0x10, 0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0xF0, 0x03, 0xA3, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x32, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x0F, 0x58, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0xF9, 0x03, 0x85, 0xCF, 0xDC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x1F, 0x8B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xF1, 0x03, 0xA3, 0x10, 0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0xF0, 0x03, 0xA4, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x32, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x0F, 0x9C, 0x13, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0xF9, 0x03, 0x85, 0xCF, 0xDC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x02, 0x8B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xF1, 0x03, 0xA4, 0x10, 0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0xF0, 0x03, 0xA5, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x32, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x0F, 0x6C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0xF9, 0x03, 0x85, 0xCF, 0xDC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0xE5, 0x8A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xF1, 0x03, 0xA5, 0x10, 0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0xF0, 0x03, 0xA6, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x32, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x0F, 0xEE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0xF9, 0x03, 0x85, 0xCF, 0xDC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0xC8, 0x8A, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xF1, 0x03, 0xA6, 0x10, 0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x00, 0xEC, 0x03, 0x00, 0x00, 0xFF, 0x00, 0x45, 0x08, 0x00, 0x00, 0x55, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x0A, 0x54, 0x68, 0x6F, 0x58, 0x69, 0x6E, 0x68, 0x47, 0x61, 0x69, 0x00, 0x35, 0x59, 0x6F, 0x75, 0x20, 0x70, 0x61, 0x69, 0x64, 0x20, 0x5B, 0x31, 0x34, 0x35, 0x5D, 0x20, 0x5A, 0x65, 0x72, 0x6F, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x5B, 0x35, 0x5D, 0x20, 0x6F, 0x66, 0x20, 0x5B, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x35, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x5D, 0x00, 0x00, 0x00 };
            IAtomService service = new AtomService(null, null, null);
            var atoms = service.GetAtoms(p1.vnClone());
            service.SetAtoms(atoms);
        }
    }
}
